var explanations = {
'\u25cb':'push a single byte of unformatted input from STDIN (push sys.stdin.read(1))',
'\u2640':'push all data from stdin as a string',
' ':'push the # of elements on the stack (push len(stack))',
'!':'pop a: push a! (factorial(a))',
'"':'string literal, reads until next " and pushes value onto stack. An implied " is present at EOF if needed.',
'#':'pop a: push list(a)',
'$':'pop a: push str(a)',
'%':'pop a,b: push a%b; pop "a",[b]: push "a"%[b]',
'&':'pop a,b: push (a & b)',
"'":'pushes next character onto stack as character literal (length-1 string)',
'(':'rotates stack right by 1',
')':'rotates stack left by 1',
'*':'pop a,b: push a*b; pop "a",b: repeat "a" b times, push "a" ("a"*b); pop a,[b] or [b],a: apply a* to each element in the array; pop [a],[b]: push dot product of [a] and [b] (sum([a[i]*b[i] for i in len(a)])) (shorter is padded with 0s)',
'+':'pop a,b: push a+b; pop "a","b": push concatenation of "a" and "b"; pop [a],[b]: push [a][b] (append [b] to [a]); pop a,[b] or [b],a: apply a+ to each element in the array',
',':'read value from stdin and push',
'-): pop a,b: push a-b; pop [a],[b] (or "a",[b] or [a],"b" or "a","b"':'push [a]-[b] (all elements of [a] not in [b])',
'.':'pop a: write a to stdout; pop f: f. (call f and execute . recursively)',
'/':'pop a,b: push a/b (float division); pop [a]: rotate [a] right by 1, push [a]',
'0':'push 0',
'1':'push 1',
'2':'push 2',
'3':'push 3',
'4':'push 4',
'5':'push 5',
'6':'push 6',
'7':'push 7',
'8':'push 8',
'9':'push 9',
':':'numeric literal delimiter: pushes the string between it and the following : as a numeric value, or 0 if it cannot be converted. An implicit : is present at EOF if needed.',
';':'pop a: push a,a (duplicates top element)',
'<':'pop a,b: push 1 if a<b else 0',
'=':'pop a,b: push 1 if a==b else 0',
'>':'pop a,b: push 1 if a>b else 0',
'?':'NOP, extended expressions if -e flag is passed',
'@':'pop a,b: push a,b (rotate top 2 elements)',
'A':'pop a: push abs(a)',
'B':'pop a,b: push a random integer in [a,b) (randrange(a,b))',
'C':'pop a: push cos(a)',
'D':'pop a: push a-1',
'E':'pop a: push erf(a); pop [a],b: push [a][b] (bth item in [a]) (also works for strings)',
'F':'pop a: push Fib(a) (Fib(0)=0, Fib(1)=Fib(2)=1)',
'G':'push a random float in the range [0,1) (push random())',
'H':'if stack is empty: push "Hello, World!"',
'I':'pop a,b,c: push b if a is truthy, else push c',
'J':'pop a: push a random integer in [0,a) (randrange(a)); pop [a] or "a": push a random element from [a] or "a" (random.choice([a]|"a"))',
'K':'pop a: push ceil(a)',
'L':'pop a: push floor(a)',
'M':'pop f,[a], execute f for each element in [a], using the element as a temporary stack, push [a] (similar to map(f,[a])); pop [a]: push max([a])',
'N':'if stack is empty: push the lyrics to "99 Bottles of Beer"',
'O':'pop "a" or [a]: push [ord(c) for each c in "a" or [a], starting from the end]. If a list is popped, it is flattened, and if it contains strings of length > 1, the strings are exploded in-place ("ABC" -> [65,66,67], ["A","B","CD"] -> [65,66,67,68])',
'P':'pop a: push the a-th prime (zero-indexed)',
'Q':"if stack is empty: push the program's source code",
'R':'pop f,[a]: call f, using [a] as a temporary stack, push [a] (similar to reduce(f,[a])); pop "a" or [a]: push reversed value ("a".reverse() or [a][::-1]); pop a: push [1,2,...,a] (range(1,a+1))',
'S':'pop a: push sin(a); pop "a" or [a]: push sorted(a)',
'T':'pop a: push tan(a); pop [a],b,c: set [a][b] to c, push [a]',
'U':'pop [a],[b]: push union of [a] and [b]',
'V':'pop a,b: push uniform(a,b) (random float between a and b)',
'W':'loop delimiter: peek top of stack, repeat code in loop while a evaluates to true',
'X':'pop a: discard',
'Y':'pop a: push !bool(a) (logical negate, opposite of b)',
'Z':'pop [a],[b]: push zip([a],[b]); pop a, zip the next a lists',
'[':'begin list literal, values are delimited by commas (,)',
'\\':'pop a,b: push a/b (integer division); pop [a]: rotate [a] left by 1, push [a]',
']':'end list literal',
'^':'pop a,b: push pow(a,b)',
'_':'pop a: push ln(a)',
'`':'function literal delimiter, pushes function whose body contains all of the commands until the next `. An implied ` is present at EOF if needed.',
'a':'invert the stack ([a,b,c,d] -> [d,c,b,a])',
'b':'pop a: push 0 if a==0 else 1; pop "a" or [a]: push 0 if len(a)==0 else 1; pop f: push 0 if len(f)==0 else 1',
'c':'pop a: push character at ordinal a%256; pop [a],b: push [a].count(b); pop "a","b": push "a".count("b")',
'd':'pop [a]: dequeue b from [a], push [a],b',
'e':'pop a: push exp(a)',
'f':'pop a: push the Fibonacci index of a if a is a Fibonacci number, else -1; pop "a",[b]: push "a".format(*[b])',
'g':'pop a,b: push gcd(a,b)',
'h':'pop a,b: push sqrt(a*a+b*b) (Euclidean norm)',
'i':'pop "a": push atof(a); pop [a]: push each element from [a], starting from end (flatten)',
'j':'pop "a",[b]: push "a".join([b]) (converting values in [b] to strings with $ if necessary)',
'k':'pop all elements from stack, convert to list (in the order they were on the stack, starting from the top), and push',
'l':'pop "a" or [a] or f: push len(a) (or len(f))',
'm':'pop a: push int(a),frac(a) (modf(a)); pop [a]: push min([a])',
'n':'pop a,b: push a b times; pop f,b: call f b times',
'o':'pop [a],b: push b to [a], push [a]',
'p':'pop a: push 1 if a is prime else 0; pop [a]: pop b from [a], push [a],b',
'q':'pop [a],b: enqueue b in [a], push [a]',
'r':'pop "a": push each character in "a", starting from the end (explode string); pop a: push [0,1,...,a-1] (range(0,a))',
's':'pop a: push sgn(a); pop [a],[b]: push a list of sublists of [a] split by any occurrences of elements of [b] (with "a", the sublists are strings)',
't':'pop all elements from stack, flatten any lists and explode any strings, and push them in the same order they were popped (full stack flatten/explode)',
'u':'pop a: push a+1',
'v':'pop a: seed the RNG with a (random.seed(a))',
'w':'pop a: push the full positive prime factorization of |a| (18 -> [[2,1],[3,2]], -5 -> [[5,1]])',
'x':'pop a,b: push [a,b) (range(a,b))',
'y':'pop a: push the positive prime factors of |a| (18 -> [2,3], -5 -> [5])',
'z':'pop a: repeat . a times (pop a times and print to stdout)',
'{':'pop a: rotate stack right a times',
'|':'pop a,b: push (a | b)',
'}':'pop a: rotate stack left a times',
'~':'pop a: push ~a (unary bitwise negate)',
'\x7f':'terminate the program (without implicit stack popping and printing)',
'\xc7':'pop a,b: push a+bi; pop [a]: pop pairs of real numerics b,c from [a] and push b+ci (appending 0 to [a] if len([a]) is odd)',
'\xfc':'pop entire stack and print to stdout',
'\xe9':'pop entire stack (clear stack)',
'\xe2':'pop a: push asin(a)',
'\xe4':'pop a: push acos(a)',
'\xe0':'pop a: push atan(a)',
'\xe5':'pop a,b: push atan2(a,b)',
'\xe7':'pop a: push asinh(a)',
'\xea':'pop a: push acosh(a)',
'\xeb':'pop a: push atanh(a)',
'\xe8':'pop a: push repr(a)',
'\xef':'push i, the imaginary unit (sqrt(-1) or 0+1i)',
'\xee':'pop a, push 0+ai; pop [a], push [a] with every element multiplied by i',
'\xec':'pop a: push 1/a; pop [a]: push numerics from [a]',
'\xc4':'pop a: push sinh(a)',
'\xc5':'pop a: push cosh(a)',
'\xc9':'pop a: push tanh(a)',
'\xe6':'pop [a]: push mean([a])',
'\xc6':'pop "a","b","c": push "a".replace("b","c"); pop [a]: push strings from [a]',
'\xf4':'pop "a": push "a".strip()',
'\xf6':'pop "a": push "a".lstrip()',
'\xf2':'pop "a": push "a".rstrip()',
'\xfb':'pop "a": push "a".upper()',
'\xf9':'pop "a": push "a".lower()',
'\xff':'pop "a": push "a".title()',
'\xd6':'pop "a": push "a".swapcase()',
'\xdc':'pop [a]: push mode([a])',
'\xa2':'pop a,b: push abs(a)*sgn(b)',
'\xa3':'pop "a": push a function whose code is "a"; pop [a]: push functions from [a]',
'\xa5':'pop [a],[b]: push the result of pairwise addition of [a] and [b], padding the shorter with 0s',
'\u20a7':'pop z: push phase(z)',
'\u0192':'pop f: call f',
'\xe1':'pop z: push the complex conjugate of z',
'\xed':'pop [a],b: push [a].index(b) (0-based, -1 if not found)',
'\xf3':'pop a: if bool(a) push a, else terminate the program (conditional exit); terminate the program if the stack is empty',
'\xfa':'push the lowercase English alphabet (ordinals 97-122)',
'\xf1':'pop [a]: push enumerate([a]) ([[i,a[i]] for i in range(len(a))])',
'\xd1':'pop [a]: push lists from [a]',
'\xaa':'pop a: push a*a',
'\xba':'pop a: push degrees(a)',
'\xbf':'pop a,b: push int(a,b) (interpret a as a base-b int)',
'\u2310':'pop a: push a+2',
'\xac':'pop a: push a-2',
'\xbd':'pop a: push a/2 (float division)',
'\xbc':'pop a: push a/4 (float division)',
'\xa1':'pop a,b: push a string representing a in base b',
'\xab':'pop a,b: insert b at position a, indexed from the bottom of the stack',
'\xbb':'pop a,b: insert b at position a, indexed from the top of the stack',
'\u2591':'pop [a],[b]: push [[a][i] if [b][i] for i in len(a)], pads [b] with 0s if necessary',
'\u2592':'pop a: push totient(a) (# of integers <= a that are coprime with a)',
'\u2593':'pop a: push pi(a) (# of primes <= a)',
'\u2502':'duplicate stack ([a,b,c] => [a,b,c,a,b,c])',
'\u2524':'pop a,b: push 1 if a and b are coprime else 0',
'\u2563':"pop a: push the ath row in Pascal's triangle",
'\u2551':'pop [a] or "a": push median([a]/"a") (using ordinals if string)',
'\u2557':'pop a: save a in register 0',
'\u255d':'pop a: save a in register 1',
'\u255c':'push the value in register 0',
'\u255b':'push the value in register 1',
'\u2510':'pop a,b: push b to register a',
'\u2514':'pop a: push the value in register a',
'\u253c':'duplicate each element on stack ([a,b,c] => [a,a,b,b,c,c])',
'\u255e':'pop a: make a total copies of each element on stack (3 [a,b,c] -> [a,a,a,b,b,b,c,c,c])',
'\u255f':'pop a: pop a elements and push a list containing those elements in their original order',
'\u2566':'push pi',
'\u2560':'push e',
'\u256c':'pop f: while value on top of stack is truthy (peek), call f',
'\u2564':'pop a: push 10**a',
'\u2565':'pop a: push log(a) (log base 10)',
'\u2559':'pop a: push 2**a',
'\u2558':'pop a: push lg(a) (log base 2)',
'\u2552':'push ln(2)',
'\u2588':'pop a,b: push C(a,b) (aCb)',
'\u2584':'pop a,b: push P(a,b) (aPb)',
'\u258c':'pop "a": push b64decode("a")',
'\u2590':'pop "a": push b64encode("a")',
'\u2580':'pop a: push digits in base a',
'\u0393':'pop a: push Gamma(a)',
'\u03c0':'pop [a]: push product([a])',
'\u03a3':'pop [a]: push sum([a])',
'\u03c4':'pop a: push 2*a',
'\u03b4':"pop a: bring the (a mod len(stack))'th item on the stack to the top",
'\u221e':'toggle preserve mode; if on, stack items are peeked rather than popped; implicitly turned off at EOF',
'\u03c6':'push phi (golden ratio)',
'\u03b5':'push "" (empty string)',
'\u2229':'pop [a],[b]: push intersection of [a] and [b]',
'\u2261':'pop a: push eval(a)',
'\xb1':'pop a: push -a (unary negate)',
'\u2265':'pop a,b: push a>=b',
'\u2264':'pop a,b: push a<=b',
'\u2248':'pop a: push int(a)',
'\xb0':'pop a: push radians(a)',
'\u2219':'pop [a],[b]: push Cartesian product of [a] and [b]',
'\u221a':'pop a: push sqrt(a)',
'\u25a0':'print the entire stack without popping, separated by spaces'
};